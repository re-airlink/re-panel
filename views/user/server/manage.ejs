<%- include('../../components/header', { title: 'Console' }) %>
<%- include('../../components/serverFeatures') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"
    integrity="sha512-2PRgAav8Os8vLcOAh1gSaDoNLe1fAyq8/G3QSdyjFFD+OqNjLeHE/8q4+S4MEZgPsuo+itHopj+hJvqS8XUQ8A=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css"
    integrity="sha512-iLYuqv+v/P4u9erpk+KM83Ioe/l7SEmr7wB6g+Kg1qmEit8EShDKnKtLHlv2QXUp7GGJhmqDI+1PhJYLTsfb8w=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.min.js"
    integrity="sha512-43J76SR5UijcuJTzs73z8NpkyWon8a8EoV+dX6obqXW7O26Yb268H2vP6EiJjD7sWXqxS3G/YOqPyyLF9fmqgA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"
    integrity="sha512-+wh8VA1djpWk3Dj9/IJDu6Ufi4vVQ0zxLv9Vmfo70AbmYFJm0z3NLnV98vdRKBdPDV4Kwpi7EZdr8mDY9L8JIA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>

<style>
    canvas {
        position: absolute;
        left: 0;
        top: 0;
        width: 100% !important;
        height: 100% !important;
    }

    .xterm-viewport {
        overflow-y: hidden !important;
    }
</style>

<main class="h-screen m-auto text-white">
  <div class="flex h-screen">
    <!-- Sidebar -->
    <div class="w-60 h-full">
      <%- include('../../components/template') %>
    </div>

    <!-- Content -->
    <div class="flex-1 p-6 overflow-y-auto pt-16">
      <!-- Page Header -->
      <div class="sm:flex sm:items-center px-8 pt-4">
        <div class="sm:flex-auto">
          <h1 class="text-base font-medium leading-6 text-neutral-800 dark:text-white">
            <%= server.name.charAt(0).toUpperCase() + server.name.slice(1) %>
          </h1>
          <p class="mt-1 tracking-tight text-sm text-neutral-500">
            <%= server.description %>
          </p>
        </div>
        <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex gap-2.5">
            <button id="startButton" type="button"
                class="block rounded-xl bg-emerald-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-emerald-500 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                    class="size-4 inline-flex mr-1 text-emerald-100 mb-0.5">
                    <path fill-rule="evenodd"
                        d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
                        clip-rule="evenodd" />
                </svg>
                <%= req.translations.start %>
            </button>
            <button id="restartButton" type="button"
                class="block rounded-xl bg-neutral-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-neutral-700/95 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                    class="size-4 inline-flex mr-1 text-zinc-200 mb-0.5">
                    <path fill-rule="evenodd"
                        d="M4.755 10.059a7.5 7.5 0 0 1 12.548-3.364l1.903 1.903h-3.183a.75.75 0 1 0 0 1.5h4.992a.75.75 0 0 0 .75-.75V4.356a.75.75 0 0 0-1.5 0v3.18l-1.9-1.9A9 9 0 0 0 3.306 9.67a.75.75 0 1 0 1.45.388Zm15.408 3.352a.75.75 0 0 0-.919.53 7.5 7.5 0 0 1-12.548 3.364l-1.902-1.903h3.183a.75.75 0 0 0 0-1.5H2.984a.75.75 0 0 0-.75.75v4.992a.75.75 0 0 0 1.5 0v-3.18l1.9 1.9a9 9 0 0 0 15.059-4.035.75.75 0 0 0-.53-.918Z"
                        clip-rule="evenodd" />
                </svg>
                <%= req.translations.restart %>
            </button>
            <button id="stopButton" type="button"
                class="block rounded-xl bg-red-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-red-500 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                    class="size-4 inline-flex mr-1 text-red-100 mb-0.5">
                    <path fill-rule="evenodd"
                        d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z"
                        clip-rule="evenodd" />
                </svg>
                <%= req.translations.stop %>
            </button>
        </div>
      </div>
      
      <div class="rounded-xl bg-red-800/10 px-4 py-6 mt-8 ml-8 mb-8 mr-8 hidden" id="daemonIsDown">
        <div class="flex">
            <div class="flex-shrink-0 ml-1.5">
                <svg class="animate-spin mt-2 h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg"
                    fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                    </circle>
                    <path class="opacity-75" fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                </svg>
            </div>
            <div class="ml-5">
                <h3 class="text-sm font-medium text-red-400"><%= req.translations.connectionFailure %></h3>
                <div class="text-sm text-red-400/50">
                    <p><%= req.translations.connectionFailureText %></p>
                </div>
            </div>
        </div>
    </div>

      <%- include('../../components/serverTemplate') %>


    <!-- Info Cards -->
      <div class="mt-8 ml-8 mb-4">
        <dl class="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-4 mr-8">

          <div class="overflow-hidden bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 flex items-center">
            <div class="flex-grow">
                <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.addressIP %>:</dt>
                <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                    <span>
                      <%= server.node.address %><span class="text-neutral-400">:<%= server.Ports ? JSON.parse(server.Ports).filter(Port => Port.primary).map(Port => Port.Port.split(':')[1]).pop() : '' %></span>
                    </span>
                </dd>
            </div>
            <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M240,120a8,8,0,0,1-8,8H200v32h8a16,16,0,0,1,16,16v32a16,16,0,0,1-16,16H176a16,16,0,0,1-16-16V176a16,16,0,0,1,16-16h8V128H72v32h8a16,16,0,0,1,16,16v32a16,16,0,0,1-16,16H48a16,16,0,0,1-16-16V176a16,16,0,0,1,16-16h8V128H24a8,8,0,0,1,0-16h96V88h-8A16,16,0,0,1,96,72V40a16,16,0,0,1,16-16h32a16,16,0,0,1,16,16V72a16,16,0,0,1-16,16h-8v24h96A8,8,0,0,1,240,120Z"/></svg>
            </div>
        </div>
        <div class="overflow-hidden bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 flex items-center">
            <div class="flex-grow">
                <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.Image %>:</dt>
                <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                    <span>
                        <%= server.image.name %>
                    </span>
                </dd>
            </div>
            <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M243.31,136,144,36.69A15.86,15.86,0,0,0,132.69,32H40a8,8,0,0,0-8,8v92.69A15.86,15.86,0,0,0,36.69,144L136,243.31a16,16,0,0,0,22.63,0l84.68-84.68a16,16,0,0,0,0-22.63ZM84,96A12,12,0,1,1,96,84,12,12,0,0,1,84,96Z"/></svg>
            </div>
        </div>
        <div class="overflow-hidden bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 flex items-center">
            <div class="flex-grow">
                <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.Node %>:</dt>
                <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                    <%= server.node.name %> <span class="text-neutral-500">(<%= server.node.address %>)</span>
                </dd>
            </div>
            <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M208,40H48A16,16,0,0,0,32,56v48a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V56A16,16,0,0,0,208,40ZM180,92a12,12,0,1,1,12-12A12,12,0,0,1,180,92Z"/><path d="M208,136H48a16,16,0,0,0-16,16v48a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V152A16,16,0,0,0,208,136Zm-28,52a12,12,0,1,1,12-12A12,12,0,0,1,180,188Z"/></svg>
            </div>
        </div>
        <div class="overflow-hidden bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 flex items-center">
            <div class="flex-grow">
                <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.identifier %>:</dt>
                <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                    <%= server.UUID.split('-')[0] %>
                </dd>
            </div>
            <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M116.25,112h31.5l-8,32h-31.5ZM224,48V208a16,16,0,0,1-16,16H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32H208A16,16,0,0,1,224,48Zm-16,56a8,8,0,0,0-8-8H168.25l7.51-30.06a8,8,0,0,0-15.52-3.88L151.75,96h-31.5l7.51-30.06a8,8,0,0,0-15.52-3.88L103.75,96H64a8,8,0,0,0,0,16H99.75l-8,32H56a8,8,0,0,0,0,16H87.75l-7.51,30.06a8,8,0,0,0,5.82,9.7,8.13,8.13,0,0,0,2,.24,8,8,0,0,0,7.75-6.06L104.25,160h31.5l-7.51,30.06a8,8,0,0,0,5.82,9.7A8.13,8.13,0,0,0,136,200a8,8,0,0,0,7.75-6.06L152.25,160H192a8,8,0,0,0,0-16H156.25l8-32H200A8,8,0,0,0,208,104Z"/></svg>
            </div>
        </div>

        </dl>
      </div>

      <div class="flex flex-col lg:flex-row px-8">

<!-- Left side: Console -->
<div class="w-full lg:w-2/3 lg:pr-5 flex flex-col">
    <div class="bg-neutral-100 dark:bg-neutral-900/50 border border-neutral-800/20 dark:border-neutral-600/10 shadow shadow-neutral-900/20 dark:shadow-transparent rounded-t-xl p-4 flex-1">
        <div id="terminal" class="overflow-x-auto whitespace-pre-wrap min-h-full w-full"></div>
    </div>
    <div class="relative">
        <input id="input" type="text" autocomplete="off" placeholder="Type a command..."
            class="w-full px-4 py-3  bg-neutral-200 dark:bg-neutral-600/20 text-neutral-800 dark:text-white rounded-b-xl text-sm border-t border-neutral-600/20 select-none focus:ring-1  focus:ring-neutral-500/50 dark:focus:ring-neutral-100/20 focus:border-transparent placeholder:font-medium placeholder:text-neutral-600 dark:placeholder:text-neutral-500">
        
            <% if (features.includes('auto-complete')) { %>
        <div id="settings-icon" class="absolute right-4 top-3 cursor-pointer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 text-neutral-600 dark:text-neutral-400">
                <path stroke-linecap="round" stroke-linejoin="round" d="m6.75 7.5 3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0 0 21 18V6a2.25 2.25 0 0 0-2.25-2.25H5.25A2.25 2.25 0 0 0 3 6v12a2.25 2.25 0 0 0 2.25 2.25Z" />
            </svg>
        </div>
        
        <div id="suggestions" class="absolute bg-neutral-800 text-white border border-neutral-600 rounded-b-lg w-full max-h-40 overflow-y-auto hidden -mt-2">
            <!-- Auto Complete thingys come here -->
        </div>
        <div id="settings-menu" class="absolute bg-neutral-700 text-white p-4 rounded-lg hidden mt-10 right-0 w-48">
            <label class="flex items-center space-x-2">
                <input type="checkbox" id="auto-complete-toggle" class="form-checkbox h-4 w-4 text-neutral-400" />
                <span>Enable Auto-Completion</span>
            </label>
        </div>
        <% } %>
    </div>
</div>
        
        <!-- Right side: Stats Cards -->
        <div class="w-full lg:w-1/3 mt-4 lg:mt-0 space-y-4 flex flex-col">
            <!-- Status Card -->
            <div class="bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 h-full relative overflow-hidden flex-1">
                <canvas id="statusChart" class="absolute inset-0 w-full h-full"></canvas>
                <div class="relative z-10 flex items-center justify-between">
                  <div>
                    <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.Status %>:</h2>
                    <p id="status" class="mt-1 text-lg font-medium tracking-tight text-white">-</p>
                  </div>
              
                <% if (features.includes('players')) { %>
                  <div id="players-deco" class="flex items-center transition-all duration-[1.5s,15s] translate-y-32">
                    <div class="relative inline-flex items-center">
                      <div class="w-14 h-14 rounded-lg overflow-hidden border-2 border-white/10 transform hover:-translate-y-2 transition-all duration-500 relative z-30">
                        <img src="https://mc-heads.net/avatar/privt" alt="Avatar 1" class="w-full h-full" />
                      </div>
                      <div class="w-14 h-14 rounded-lg overflow-hidden border-2 border-white/10 transform -translate-y-1 hover:-translate-y-3 transition-all duration-700 -ml-4 relative z-20">
                        <img src="https://mc-heads.net/avatar/achul123" alt="Avatar 2" class="w-full h-full" />
                      </div>
                      <div class="w-14 h-14 rounded-lg overflow-hidden border-2 border-white/10 transform hover:-translate-y-4 transition-all duration-500 -ml-4 relative z-10">
                        <img src="https://mc-heads.net/avatar/dc7431" alt="Avatar 3" class="w-full h-full" />
                      </div>
                    </div>
                  </div>
                <% } %>
                </div>
              </div>
              
    
            <!-- RAM Usage Card -->
            <div class="bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 h-full relative overflow-hidden flex-1">
                <canvas id="ramChart" class="absolute inset-0 w-full h-full"></canvas>
                <div class="relative z-10">
                    <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.ramUsage %>:</h2>
                    <p id="ramUsage" class="mt-1 text-lg font-medium tracking-tight text-white">0% (0 Bytes / 0 Bytes)</p>
                </div>
            </div>
    
            <!-- CPU Usage Card -->
            <div class="bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 h-full relative overflow-hidden flex-1">
                <canvas id="cpuChart" class="absolute inset-0 w-full h-full"></canvas>
                <div class="relative z-10">
                    <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.cpuUsage %>:</h2>
                    <p id="cpuUsage" class="mt-1 text-lg font-medium tracking-tight text-white">0%</p>
                </div>
            </div>
    
            <!-- Disk Usage Card -->
            <div class="bg-neutral-500/20 border border-neutral-700/10 dark:bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 h-full relative overflow-hidden flex-1">
                <canvas id="diskChart" class="absolute inset-0 w-full h-full hidden"></canvas>
                <div class="relative z-10">
                    <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.diskUsage %>:</h2>
                    <p id="diskUsage" class="mt-1 text-lg font-medium tracking-tight text-white">-</p>
                </div>
            </div>
        </div>

      </div>

    </div>
  </div>
</main>

<%- include('../../components/footer') %>

<script>
const baseTheme = {
  foreground: '#c5c9d1',
  background: 'rgba(0, 0, 0, 0)',
  selection: '#5DA5D533',
  black: '#1E1E1D',
  brightBlack: '#262625',
  red: '#E54B4B',
  green: '#9ECE58',
  yellow: '#FAED70',
  blue: '#396FE2',
  magenta: '#BB80B3',
  cyan: '#2DDAFD',
  white: '#d0d0d0',
  brightRed: '#FF5370',
  brightGreen: '#C3E88D',
  brightYellow: '#FFCB6B',
  brightBlue: '#82AAFF',
  brightMagenta: '#C792EA',
  brightCyan: '#89DDFF',
  brightWhite: '#ffffff',
  cursor: '#c5c9d1',
  cursorAccent: '#c5c9d1'
};

const lightTheme = {
  ...baseTheme,
  foreground: '#1E1E1D',
  selection: '#5DA5D533'
};

function createTerminal(theme) {
  return new Terminal({
    disableStdin: true,
    allowProposedApi: true,
    lineHeight: 1.35,
    rows: 19,
    cols: 100,
    fontFamily: 'Menlo, monospace',
    theme: theme,
    allowTransparency: true,
    fontSize: 12
  });
}

let term = createTerminal(document.documentElement.classList.contains('dark') ? baseTheme : lightTheme);
term.open(document.getElementById('terminal'));

function setTerminalTheme() {
  const isDark = document.documentElement.classList.contains('dark');
  term.setOption('theme', isDark ? baseTheme : lightTheme);
}


    const maxCommands = 10;
    let commandHistory = [];
    let currentCommandIndex = -1;

    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.host;
    const path = '/console/<%= server.UUID %>';

    const socketUrl = `${protocol}//${host}${path}`;

    let socket;

let isReconnecting = false;

function connectWebSocket() {
    if (socket && (socket.readyState === WebSocket.CONNECTING || socket.readyState === WebSocket.OPEN)) {
        console.log("WebSocket is already connecting or open. Skipping new connection.");
        return;
    }

    isReconnecting = true;

    if (socket) {
        console.log("Closing existing WebSocket connection...");
        socket.close();
    }

    socket = new WebSocket(socketUrl);

    socket.onopen = () => {
        console.log('WebSocket connection established');
        writeConsole('system', 'system', 'WebSocket connection established');
        isReconnecting = false;
    };

    socket.onmessage = handleWebSocketMessage;

    socket.onerror = (error) => {
        console.error('WebSocket Error:', error.message);
        writeConsole('system', 'error', `WebSocket Error: ${error.message}`);
    };

    socket.onclose = () => {
        console.log('WebSocket connection closed. Reconnecting...');
        writeConsole('system', 'system', 'WebSocket connection closed. Reconnecting...');

        if (!isReconnecting) {
            isReconnecting = true;
            setTimeout(() => {
                connectWebSocket();
            }, 5000);
        }
    };
}

connectWebSocket();


    function handleWebSocketMessage(msg) {
        const lines = msg.data.split('\n');
        let isFirstLine = true;
        let previousLineWasEmpty = false;

        lines.forEach(line => {
            const trimmedLine = line.trim();

            if (trimmedLine.includes("Failed to attach to container")) {
                return;
            }

            if (trimmedLine === '' && previousLineWasEmpty) return;

            if (!isFirstLine && !previousLineWasEmpty) {
                term.write('\r\n');
            }

            term.write('\x1b[0m' + trimmedLine);

            if (trimmedLine.includes("Working on")) {
                term.write('\r\n\u001b[1m\u001b[33m[panel] \u001b[0mReconnecting socket, hold on...');
                term.clear();
                socket.close();
            }

            if (trimmedLine.includes("airlinkd server appears to be down")) {
                socket.close();
                document.getElementById('daemonIsDown').classList.remove('hidden');
            } else {
                document.getElementById('daemonIsDown').classList.add('hidden');
            }

            isFirstLine = false;
            previousLineWasEmpty = (trimmedLine === '');
        });
    }

    function writeConsole(prefix, type, message) {
        const colors = {
            airlinkd: baseTheme.blue,
            system: baseTheme.yellow,
            error: baseTheme.red,
            info: baseTheme.blue,
            success: baseTheme.green,
            normal: baseTheme.foreground
        };

        const color = colors[type.toLowerCase()] || baseTheme.foreground;
        const messageColor = baseTheme.white;

        const prefixText = (prefix && type !== 'normal') ? `[${prefix}] ` : '';

        const formattedMessage =
            `\x1b[38;2;${hexToRgb(color).join(';')}m${prefixText}` +
            `\x1b[38;2;${hexToRgb(messageColor).join(';')}m${message}\x1b[0m\r\n`;

        term.write(formattedMessage);
    }

    function restartWebSocket() {
        if (socket) {
            console.log("Restarting WebSocket connection...");
            socket.close();
        }
        setTimeout(connectWebSocket, 500);
    }

    function sendCommand() {
        const inputElement = document.getElementById('input');
        const command = inputElement.value.trim();
        if (command && socket) {
            term.write('\u001b[1m\u001b[33m~ \u001b[0m' + command + '\r\n');
            socket.send(JSON.stringify({
                event: 'CMD',
                command: command
            }));

            if (commandHistory.length === maxCommands) {
                commandHistory.shift();
            }
            commandHistory.push(command);
            currentCommandIndex = commandHistory.length;

            inputElement.value = '';
        }
    }

    function handleKeyUp(event) {
        if (event.key === 'ArrowUp') {
            if (currentCommandIndex > 0) {
                currentCommandIndex--;
                document.getElementById('input').value = commandHistory[currentCommandIndex];
            }
            event.preventDefault();
        } else if (event.key === 'ArrowDown') {
            if (currentCommandIndex < commandHistory.length - 1) {
                currentCommandIndex++;
                document.getElementById('input').value = commandHistory[currentCommandIndex];
            } else {
                currentCommandIndex = commandHistory.length;
                document.getElementById('input').value = '';
            }
            event.preventDefault();
        }
    }

    function hexToRgb(hex) {
        const bigint = parseInt(hex.replace('#', ''), 16);
        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;
        return [r, g, b];
    }

    let id = 0;

    document.getElementById('startButton').addEventListener('click', () => {
        const serverUUID = '<%= server.UUID %>';
        fetch(`/server/${serverUUID}/power/start`, {
            method: 'POST',
        })
            .then(response => response.json())
            .then(data => {
                restartWebSocket();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });

    document.getElementById('stopButton').addEventListener('click', () => {
        const serverUUID = '<%= server.UUID %>';
        fetch(`/server/${serverUUID}/power/stop`, {
            method: 'POST',
        })
            .then(response => response.json())
            .then(data => {
                restartWebSocket();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const inputElement = document.getElementById('input');
        inputElement.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                sendCommand();
            }
        });

        inputElement.addEventListener('keydown', handleKeyUp);
    });

    function initStatsWebSocket() {
        const statsWs = new WebSocket(`${protocol}//${host}/status/<%= server.UUID %>`);
        
        statsWs.onmessage = event => {
            if (isValidJson(event.data)) {
                const stats = JSON.parse(event.data);
                if (stats.error) {
                    console.error('Error fetching stats:', stats.error);
                    return;
                }
    
                updateRamUsage(stats);
                updateCpuUsage(stats);
                updateDiskUsage(stats);
                updateStatus(stats);
            } else {
                console.log('Received non-JSON data:', event.data);
            }
        };


        statsWs.onopen = () => {
            console.log('WebSocket Stats connection established');
        };

        statsWs.onclose = () => {
            console.log('WebSocket Stats connection closed, attempting to reconnect...');

            <% if (features.includes('players')) { %>
            const playersDeco = document.getElementById('players-deco');
            <% } %>

            const statusElement = document.getElementById('status');

            statusElement.textContent = 'Connection Lost!';
            statusElement.className = 'mt-1 text-lg font-medium tracking-tight text-red-500';
            <% if (features.includes('players')) { %>
            playersDeco.classList.add('translate-y-32');
            <% } %>
        };
    }

    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    function createBackgroundChart(canvasId, type = 'line') {
            return new Chart(document.getElementById(canvasId).getContext('2d'), {
                type: type,
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        backgroundColor: 'rgba(255, 255, 255, 0.05)',
                        borderWidth: 1,
                        pointRadius: 0,
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    scales: {
                        x: { display: false },
                        y: { display: false }
                    },
                    animation: true
                }
            });
        }
        
    const statusChart = createBackgroundChart('statusChart');
    const ramChart = createBackgroundChart('ramChart');
    const cpuChart = createBackgroundChart('cpuChart');
    const diskChart = createBackgroundChart('diskChart', 'doughnut');

    function updateRamUsage(stats) {
    const ramStatsUsage = stats?.data?.memory?.usage || 0;
    const ramStatsLimit = stats?.data?.memory?.limit || <%- server.Memory %> * 1024 * 1024 * 1024;
    let ramUsagePercent = Number(stats?.data?.memory?.percentage) || 0;
    const ramUsageInMB = ramStatsUsage / 1024 / 1024;
    const ramLimitInMB = ramStatsLimit / 1024 / 1024;

    if (isNaN(ramUsagePercent)) {
        ramUsagePercent = 0;
    }

    const ramUsageText = `${ramUsagePercent.toFixed(1)}% (${formatBytes(ramStatsUsage)} / ${formatBytes(ramStatsLimit)})`;
    document.getElementById('ramUsage').textContent = ramUsageText;

    if (ramStatsUsage > 0) {
        updateChart(ramChart, ramUsagePercent);
    }
}

    function updateCpuUsage(stats) {
        let cpuUsagePercent = stats.data.cpu.percentage || 0;

        if (isNaN(cpuUsagePercent)) {
            cpuUsagePercent = 0;
        }

        document.getElementById('cpuUsage').textContent = `${cpuUsagePercent}% / ${<%- server.Cpu %>}%`;

        if (cpuUsagePercent > 0) {
            updateChart(cpuChart, cpuUsagePercent);
        }
    }

    function updateDiskUsage(stats) {
        const diskUsageRaw = parseFloat(stats.data.storage.usage) || 0;
        const diskLimitRaw = 10 * 1024;
        const diskUsagePercent = (diskUsageRaw / diskLimitRaw * 100).toFixed(2);
        document.getElementById('diskUsage').textContent = `${diskUsagePercent}% (${formatBytes(diskUsageRaw * 1024 * 1024)} / ${formatBytes(diskLimitRaw * 1024 * 1024)})`;
    }

    function updateStatus(stats) {
        <% if (features.includes('players')) { %>
        const playersDeco = document.getElementById('players-deco');
        <% } %>
        const statusElement = document.getElementById('status');
        const ramUsageRaw = stats.data.memory.percentage;

        if (ramUsageRaw !== "NaN") {
            statusElement.textContent = 'Online';
            statusElement.className = 'mt-1 text-lg font-medium tracking-tight text-emerald-500';
            <% if (features.includes('players')) { %>
            playersDeco.classList.remove('translate-y-32');
            <% } %>
            updateStatusChart('rgba(16, 185, 129, 0.1)', 'rgba(16, 185, 129, 0.2)');
        } else {
            statusElement.textContent = 'Offline';
            statusElement.className = 'mt-1 text-lg font-medium tracking-tight text-red-500';
            <% if (features.includes('players')) { %>
            playersDeco.classList.add('translate-y-32');
            <% } %>
            updateStatusChart('rgba(239, 68, 68, 0.1)', 'rgba(239, 68, 68, 0.2)');
        }
    }

    function updateChart(chart, value) {
        chart.data.labels.push('');
        chart.data.datasets[0].data.push(value);

        if (chart.data.labels.length > 20) {
            chart.data.labels.shift();
            chart.data.datasets[0].data.shift();
        }

        chart.update();
    }

    function updateStatusChart(backgroundColor, borderColor) {
        statusChart.data.datasets[0].backgroundColor = backgroundColor;
        statusChart.data.datasets[0].borderColor = borderColor;
        statusChart.data.labels = [''];
        statusChart.data.datasets[0].data = [100];
        statusChart.update();
    }

    function isValidJson(str) {
            try {
              JSON.parse(str);
            } catch (e) {
              return false;
            }
            return true;
        }

    initStatsWebSocket();
</script>